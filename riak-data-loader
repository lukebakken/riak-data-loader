#!/usr/bin/env ruby

# Run first:
# curl -XPUT -iH 'Content-Type: application/xml' 'http://localhost:8098/yz/schema/tweets-sch' --data-binary @twitter-schema.xml
# curl -XPUT -iH 'Content-Type: application/data' http://localhost:8098/yz/index/tweets-idx -d '{"schema":"tweets-sch"}'
# curl -XPUT -iH 'Content-Type: application/data' 'http://localhost:8098/buckets/tweets/props' -d '{"props":{"yz_index":"tweets-idx"}}'

$LOAD_PATH.unshift(File.join(File.expand_path(File.dirname(__FILE__)), 'lib'))
require 'bundler'
Bundler.require # removes need for 'bundle exec'

require 'yajl'
require 'twitter_auth'
require 'twitter'
require 'riak'
require 'time'

begin
  object_count = Integer(ARGV[0])
rescue ArgumentError, TypeError
  object_count = 1024
end

client = Twitter::Streaming::Client.new(:raw_data => true) do |config|
  twauth                     = TwitterAuth.new
  config.consumer_key        = twauth.consumer_key
  config.consumer_secret     = twauth.consumer_secret
  config.access_token        = twauth.access_token
  config.access_token_secret = twauth.access_token_secret
end

riak_client = Riak::Client.new(:protocol => "pbc")
bucket = riak_client.bucket("tweets")

stored = 0
begin
  client.sample do |data|
    Yajl::Parser.parse(data, :symbolize_keys => true) do |parsed|
      unless parsed[:delete]
        id = parsed[:id].to_s

        created_at = Time.parse(parsed[:created_at])
        parsed[:created_at] = created_at.utc.xmlschema.to_s

        tweet_obj = Riak::RObject.new(bucket, id)
        tweet_obj.content_type = "application/json"
        tweet_obj.raw_data = Yajl::Encoder.encode(parsed)
        tweet_obj.store

        stored += 1
        if (stored % 64 == 0)
          puts("Stored #{stored} objects")
        end
      end
    end
    break if stored >= object_count
  end
rescue Interrupt
  puts("Exiting!")
rescue => e
  $stderr.puts("Exception: #{e}\n#{e.backtrace}")
  retry
end

